#include<stdio.h>
#include<stdlib.h>
typedef struct Node{
	int data;
	struct Node*next;
}node;
node *head = NULL;
node *temp = NULL;
node *getnode();
void display();
void insert_beg();
void insert_end();
void insert_atk();
int counting();
void del_beg();
void del_end();
void del_atk();
void main() {
	int ch;
	while(1){
	 printf("\n 1.Insert at the beginning \n 2.Insert at the end \n 3.Insert at kth position \n 4.Display \n 5.Counting \n 6.Deletion at the beginning \n 7.Deletion at the end \n 8.Delection at kth position \n 9.Exit \n");
	 printf("Enter option: ");
	 scanf("%d",&ch);
	 switch(ch){
	 case 1: printf("Inserting at the beginning \n");
		 insert_beg();
		 break;
	 case 2: printf("Inserting at the end \n");
		 insert_end();
		 break;
	 case 3: printf("Inserting at kth position \n");
		 insert_atk();
		 break;
	 case 4: if(head == NULL){
			 printf("The list is empty");
		 }
		 else{
			 printf("The list is \n");
			 display();
		 }
		 break;
	case 5: printf("The length of the list is \n");
		counting();
		break;
	case 6: printf("Deletion at the beginning \n");
		del_beg();
		break;
	case 7: printf("Deletion at the end \n");
		del_end();
		break;
	case 8: printf("Deletion at k \n");
		del_atk();
		break;
	case 9: exit(0);
		break;
	 }
	}
}
node *getnode() {
	node *new = (node*)malloc(sizeof(node));
	printf("Enter data :");
	scanf("%d",&new -> data);
	new -> next = NULL;
	return new;
}
void insert_beg(){
	node *new = getnode();
	if(head == NULL);
	   temp =  new;
	 new -> next = head;
	 head = new;
}
void insert_end(){
	node *new= getnode();
	if(head == NULL){
		head = new;
		temp = new;
	}
	else{
		temp -> next = new;
		temp = new;
	}
}
void display(){
	node *curr = head;
	while(curr != NULL){
		printf("%d",curr -> data);
		curr = curr -> next;
	}
}
int counting() {
	int count = 1;
	node *temp;
	temp = head;
	while( temp -> next != NULL){
		count++;
		temp = temp -> next;
	}
	printf("length of list is: %d",count);
	return count;
}
void insert_atk(){
		node *new = getnode();
		temp = head;
		int i,k;
		printf("\n Enter position k: ");
		scanf("%d",&k);
		for(i=0;i<=k-1;i++){
			temp = temp -> next;
		}
		 new -> next = temp -> next;
		 temp -> next = new;
	}
void del_beg(){
		node *temp1 = head;
		if(head == NULL)
			printf("list is empty");
		else if (head -> next == NULL){
			printf("\n Data deleted %d",head -> data);
			head = NULL;
			temp1 = NULL;
			free(temp1);
		}
		else{
			head = head -> next;
			free(temp1);
		}
	}
void del_atk(){
	int k,i,n;
	node *curr = head;
	n = counting();
	node *temp1;
	printf("Enter position: ");
        scanf("%d",&k);
	if(k==1)
	  del_beg();
	else if(k==n){
	  del_end();
	}
	else if(1<k && k<n){
		for(i=1;i<=k-1;i++){
			curr = curr -> next;
		}
			temp1 = curr -> next;
			curr -> next = curr -> next ->next;
			free(temp1);
	}
	else
		printf("Invalid position\n");
}
void del_end(){
	node *temp1=head;
	if(head == NULL)
		printf("the list is empty\n");
	else if(head -> next == NULL){
		printf("data deleted: %d\n",head -> data);
		head = head -> next;
		free(temp1);
	}
	else{
		node *t;
		while(temp ->next != temp){
			temp1 = temp1 -> next;
		}
			t = temp1 -> next;
			temp1 -> next = NULL;
			temp = temp1;
			free(t);
	}
}




