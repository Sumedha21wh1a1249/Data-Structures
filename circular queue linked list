#include<stdio.h>
#include<stdlib.h>
typedef struct cNode{
        int data;
        struct cNode *next;
}cNode;
cNode *front = NULL;
cNode *rear = NULL;
cNode *temp = NULL;
cNode *getNode();
void display();
void enqueue();
int counting();
void dequeue();
void main() {
        int ch,k;
        printf("Options\n1.Enqueue\n2.Dequeue\n3.Length\n4.Display\n5.Exit\n");

        while(1) {
                printf("\nEnter option : ");
                scanf("%d",&ch);
                switch(ch){
                case 1 : 
                         enqueue();
                         break;
                case 4 : display();
                         break;
                case 3 : printf("The length of the list is : ");
                         printf("%d",counting());
                         break;
                case 2 : dequeue();
                         break;
                case 5 : exit(0);
                }
        }
}
cNode *getNode() {
        cNode *new = (cNode *)malloc(sizeof(cNode));
        printf("\nEnter data: ");
        scanf("%d",&new->data);
        new->next=NULL;
        return new;
}
void enqueue(){
        cNode *new = getNode();
        if((front==NULL) && (rear==NULL))
        {
                front=rear=new;
                rear->next=front;
                front -> next = rear;        }
        else 
        {
                rear->next=new;
                rear=new;
                rear->next=front;
        }
}
void display() {
        cNode *cur;
        cur=front;
        if((front==NULL)&&(rear==NULL))
                printf("Queue undeflow\n");
        else if(front == rear) 
        {
            printf("\nThe Queue is : \n");
            printf("%d ",cur->data);   
        }
        else{
            printf("\nThe Queue is : ");
            do{
                printf("%d ",cur->data);
                cur = cur->next;
            }while(cur!= front);
			
		    
        }
}
void dequeue() {
        cNode *ptr = front;
        if((front==NULL)&&(rear==NULL))
        {
            printf("Queue underflow\n");
        }
        else if(front == rear) {
                front=rear=NULL;
                free(ptr);
        }
        else{
                front = front->next;
                rear->next = front;
                free(ptr);
        }
        
}
int counting() {
        int count =1;
        temp = front;
        while(temp->next!=front) {
                count++;
                temp=temp->next;
                 }
        return count;
}











